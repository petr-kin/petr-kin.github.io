#!/usr/bin/env node

/**
 * BMAD-METHOD CLI
 * Main command-line interface for BMAD framework
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

const TOOLS_DIR = path.join(__dirname, 'tools');

const commands = {
    'init': {
        script: 'project-init.js',
        description: 'Initialize a new BMAD project',
        usage: 'bmad init'
    },
    'agent': {
        script: 'agent-runner.js',
        description: 'Run a specific agent',
        usage: 'bmad agent <agent-name> <project-name>'
    },
    'workflow': {
        script: 'workflow-orchestrator.js',
        description: 'Run complete BMAD workflow',
        usage: 'bmad workflow <project-name> [--auto] [--skip-review]'
    },
    'validate': {
        script: 'validate-project.js',
        description: 'Validate project structure and outputs',
        usage: 'bmad validate <project-name>'
    },
    'flatten': {
        script: 'context-flattener.js',
        description: 'Flatten project context for AI consumption',
        usage: 'bmad flatten <project-name>'
    },
    'collaborate': {
        script: 'agent-collaboration.js',
        description: 'Run agent collaboration',
        usage: 'bmad collaborate <project-name> <agents...>'
    }
};

function showHelp() {
    console.log(`
╔════════════════════════════════════════════════╗
║          BMAD-METHOD™ Framework CLI           ║
║     Systematic AI-Driven Development          ║
╚════════════════════════════════════════════════╝

📋 COMMANDS:
`);
    
    for (const [cmd, info] of Object.entries(commands)) {
        console.log(`  ${cmd.padEnd(12)} - ${info.description}`);
        console.log(`                 Usage: ${info.usage}\n`);
    }
    
    console.log(`
🚀 QUICK START:
  1. bmad init                    # Create new project
  2. bmad workflow <project>      # Run full workflow
  3. bmad validate <project>      # Check results

🤖 AGENTS:
  • analyst      - Requirements and domain analysis
  • pm           - Project management and planning
  • architect    - Technical architecture design
  • scrum-master - Development story creation

📝 EXAMPLES:
  bmad init
  bmad agent analyst my-project
  bmad workflow my-project --auto
  bmad validate my-project
  bmad flatten my-project

📁 PROJECT STRUCTURE:
  projects/<name>/
    ├── 01-analysis/      # Analyst outputs
    ├── 02-planning/      # PM outputs
    ├── 03-architecture/  # Architect outputs
    ├── 04-stories/       # Scrum Master outputs
    ├── 05-implementation/# Development tracking
    └── 06-flattened/     # Flattened context

🔗 MORE INFO:
  View README.md and USAGE-GUIDE.md for detailed documentation
`);
}

function executeCommand(command, args) {
    const cmdInfo = commands[command];
    
    if (!cmdInfo) {
        console.error(`❌ Unknown command: ${command}`);
        console.log('Run "bmad help" for available commands');
        process.exit(1);
    }
    
    const scriptPath = path.join(TOOLS_DIR, cmdInfo.script);
    
    if (!fs.existsSync(scriptPath)) {
        console.error(`❌ Script not found: ${scriptPath}`);
        process.exit(1);
    }
    
    const child = spawn('node', [scriptPath, ...args], {
        stdio: 'inherit',
        env: process.env
    });
    
    child.on('error', (error) => {
        console.error(`❌ Failed to execute command: ${error.message}`);
        process.exit(1);
    });
    
    child.on('exit', (code) => {
        process.exit(code || 0);
    });
}

// Main CLI logic
const args = process.argv.slice(2);
const command = args[0];
const commandArgs = args.slice(1);

if (!command || command === 'help' || command === '--help' || command === '-h') {
    showHelp();
} else {
    executeCommand(command, commandArgs);
}