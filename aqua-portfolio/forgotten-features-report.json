{
  "timestamp": "2025-09-06T08:07:07.848Z",
  "summary": {
    "totalForgotten": 80,
    "byType": {
      "component": 43,
      "hook": 14,
      "asset": 18,
      "util": 2,
      "api": 3
    },
    "totalComplexity": 20699,
    "suggestionsCount": 98
  },
  "features": [
    {
      "type": "component",
      "path": "src/components/ui/LoadingStateTheater.tsx",
      "name": "LoadingStateTheater",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 771,
      "lastModified": "2025-09-05T15:18:36.333Z",
      "potentialIntegrations": [],
      "codeSnippet": "LoadingStateTheater { \n  const [currentAnimation, setCurrentAnimation] = useState(0);\n  const [isPlaying, setIsPlaying] = ... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/DragDropTestBuilder.tsx",
      "name": "DragDropTestBuilder",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 757,
      "lastModified": "2025-09-05T19:24:39.129Z",
      "potentialIntegrations": [
        "Could be used in page with similar UI components",
        "Could be used in page with similar UI components",
        "Could be used in page with similar UI components"
      ],
      "codeSnippet": "DragDropTestBuilder { \n  // State management with undo/redo\n  const {\n    state: droppedSteps,\n    set: setDroppedSteps,\n ... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/usePerformanceMonitoring.test.ts",
      "name": "usePerformanceMonitoring.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 683,
      "lastModified": "2025-09-05T18:31:43.913Z",
      "potentialIntegrations": [
        "Could be integrated with performance monitoring components"
      ],
      "codeSnippet": "mockPerformance { \n  now: jest.fn(() => 1000),\n  mark: jest.fn(),\n  measure: jest.fn(),\n  clearMarks: jest.fn(),\n  cle... }"
    },
    {
      "type": "component",
      "path": "src/components/ResponsiveNavigation.tsx",
      "name": "ResponsiveNavigation",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 614,
      "lastModified": "2025-09-05T19:29:26.154Z",
      "potentialIntegrations": [
        "Could replace button elements in DataErrorBoundary",
        "Could replace button elements in ErrorBoundary",
        "Could replace button elements in HeroWave"
      ],
      "codeSnippet": "ResponsiveNavigation { \n  items,\n  logo,\n  className = '',\n  variant = 'header',\n  showBorder = true,\n  sticky = true,\n  tr... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/useMomentumScroll.test.ts",
      "name": "useMomentumScroll.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 612,
      "lastModified": "2025-09-05T16:15:37.082Z",
      "potentialIntegrations": [],
      "codeSnippet": "mockRequestAnimationFrame { \n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockRequestAnimationFrame.mockImplementation((cal... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/ParticleSystemBackground.tsx",
      "name": "ParticleSystemBackground",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 591,
      "lastModified": "2025-09-05T15:12:18.398Z",
      "potentialIntegrations": [],
      "codeSnippet": "ParticleSystemBackground { \n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const particlesRef = useRef<Particle[]>([]);... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/useGestures.test.ts",
      "name": "useGestures.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 587,
      "lastModified": "2025-09-05T16:16:18.357Z",
      "potentialIntegrations": [],
      "codeSnippet": "mockVibrate { \n  writable: true,\n  value: mockVibrate,\n... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/CaseStudyVideoMockups.tsx",
      "name": "CaseStudyVideoMockups",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 540,
      "lastModified": "2025-09-06T06:03:17.169Z",
      "potentialIntegrations": [
        "Could replace button elements in DataErrorBoundary",
        "Could replace button elements in ErrorBoundary",
        "Could replace button elements in HeroWave"
      ],
      "codeSnippet": "CaseStudyVideoMockups { \n  const [selectedVideo, setSelectedVideo] = useState<string | null>(null);\n  const [playbackStates,... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/useUndoRedo.test.ts",
      "name": "useUndoRedo.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 532,
      "lastModified": "2025-09-05T16:06:22.085Z",
      "potentialIntegrations": [],
      "codeSnippet": "initialState {  count: 0, items: [] ... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/useAppState.ts",
      "name": "useAppState",
      "reason": "Custom hook is not used in any component",
      "complexity": 529,
      "lastModified": "2025-09-05T18:06:20.267Z",
      "potentialIntegrations": [
        "Could be used in components with lifecycle effects",
        "Could be integrated with performance monitoring components"
      ],
      "codeSnippet": "useAppState { \n  const ui = useUIState();\n  const theme = useThemeState();\n  const navigation = useNavigationState... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/TestFailureSimulator.tsx",
      "name": "TestFailureSimulator",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 482,
      "lastModified": "2025-09-04T22:32:44.110Z",
      "potentialIntegrations": [],
      "codeSnippet": "TestFailureSimulator { \n  const [currentTest, setCurrentTest] = useState<FailedTest | null>(null);\n  const [isSimulating, s... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/TimelineJourney.tsx",
      "name": "TimelineJourney",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 480,
      "lastModified": "2025-09-06T06:00:46.057Z",
      "potentialIntegrations": [
        "Could replace or enhance Card usage in page",
        "Could replace or enhance Card usage in page",
        "Could replace or enhance Card usage in ProjectCard"
      ],
      "codeSnippet": "TimelineJourney { \n  const containerRef = useRef<HTMLDivElement>(null);\n  const [selectedPhase, setSelectedPhase] = us... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/DragDropTestBuilder.backup.tsx",
      "name": "DragDropTestBuilder.backup",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 479,
      "lastModified": "2025-09-05T15:47:53.801Z",
      "potentialIntegrations": [
        "Could be used in page with similar UI components",
        "Could be used in page with similar UI components",
        "Could be used in page with similar UI components"
      ],
      "codeSnippet": "DragDropTestBuilder { \n  const [droppedSteps, setDroppedSteps] = useState<DroppedStep[]>([]);\n  const [draggedItem, setDra... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/useFocusTrap.test.ts",
      "name": "useFocusTrap.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 478,
      "lastModified": "2025-09-05T16:07:01.702Z",
      "potentialIntegrations": [],
      "codeSnippet": "mockFocus { \n  tagName: tag.toUpperCase(),\n  focus: mockFocus,\n  addEventListener: mockAddEventListener,\n  remov... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/ProblemSolutionFlow.tsx",
      "name": "ProblemSolutionFlow",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 476,
      "lastModified": "2025-09-05T19:05:39.299Z",
      "potentialIntegrations": [],
      "codeSnippet": "ProblemSolutionFlow { \n  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);\n  const [animatedConne... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/useDragDrop.test.ts",
      "name": "useDragDrop.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 473,
      "lastModified": "2025-09-05T16:05:44.156Z",
      "potentialIntegrations": [],
      "codeSnippet": "onDragStart {  result ... }"
    },
    {
      "type": "component",
      "path": "src/components/ui/VirtualizedList.tsx",
      "name": "VirtualizedList",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 465,
      "lastModified": "2025-09-05T15:26:13.395Z",
      "potentialIntegrations": [],
      "codeSnippet": "VirtualizedListComponent { \n    items,\n    itemHeight,\n    height,\n    width = '100%',\n    renderItem,\n    overscan = 5,\n    cl... }"
    },
    {
      "type": "hook",
      "path": "src/hooks/__tests__/useIntersectionObserver.test.ts",
      "name": "useIntersectionObserver.test",
      "reason": "Custom hook is not used in any component",
      "complexity": 444,
      "lastModified": "2025-09-05T16:00:54.751Z",
      "potentialIntegrations": [],
      "codeSnippet": "mockObserve { \n  observe: mockObserve,\n  unobserve: mockUnobserve,\n  disconnect: mockDisconnect,\n  root: options?.... }"
    },
    {
      "type": "asset",
      "path": "public/og-image.png",
      "name": "og-image.png",
      "reason": "Asset is not referenced in any component or CSS",
      "complexity": 440,
      "lastModified": "2025-09-05T19:29:44.888Z",
      "potentialIntegrations": [
        "Could be used as image in components",
        "Could be added to hero sections or galleries"
      ]
    },
    {
      "type": "component",
      "path": "src/components/GlassNavNew.tsx",
      "name": "GlassNavNew",
      "reason": "Component is not imported anywhere in the codebase",
      "complexity": 420,
      "lastModified": "2025-09-05T20:08:38.127Z",
      "potentialIntegrations": [],
      "codeSnippet": "export default GlassNavigation { \n  const { scrollY ... }"
    }
  ],
  "suggestions": [
    {
      "feature": {
        "type": "component",
        "path": "src/components/ResponsiveNavigation.tsx",
        "name": "ResponsiveNavigation",
        "reason": "Component is not imported anywhere in the codebase",
        "complexity": 614,
        "lastModified": "2025-09-05T19:29:26.154Z",
        "potentialIntegrations": [
          "Could replace button elements in DataErrorBoundary",
          "Could replace button elements in ErrorBoundary",
          "Could replace button elements in HeroWave"
        ],
        "codeSnippet": "ResponsiveNavigation { \n  items,\n  logo,\n  className = '',\n  variant = 'header',\n  showBorder = true,\n  sticky = true,\n  tr... }"
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import ResponsiveNavigation from '@/src/components/ResponsiveNavigation.tsx';",
      "confidence": 99,
      "reason": "Could replace button elements in HeroWave"
    },
    {
      "feature": {
        "type": "asset",
        "path": "public/og-image.png",
        "name": "og-image.png",
        "reason": "Asset is not referenced in any component or CSS",
        "complexity": 440,
        "lastModified": "2025-09-05T19:29:44.888Z",
        "potentialIntegrations": [
          "Could be used as image in components",
          "Could be added to hero sections or galleries"
        ]
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import og-image.png from '@/public/og-image.png';",
      "confidence": 99,
      "reason": "Could be used as image in components"
    },
    {
      "feature": {
        "type": "component",
        "path": "src/components/sections/TestingInActionSection.tsx",
        "name": "TestingInActionSection",
        "reason": "Component is not imported anywhere in the codebase",
        "complexity": 97,
        "lastModified": "2025-08-31T08:05:10.094Z",
        "potentialIntegrations": [
          "Could be integrated in page as a section component",
          "Could be integrated in page as a section component"
        ],
        "codeSnippet": "export default TestingInActionSection { \n  return (\n    <section className=\"py-20 bg-gradient-to-b from-slate-50/50 to-white\">\n      <div cl... }"
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import TestingInActionSection from '@/src/components/sections/TestingInActionSection.tsx';",
      "confidence": 99,
      "reason": "Could be integrated in page as a section component"
    },
    {
      "feature": {
        "type": "component",
        "path": "src/components/ui/MCPAppsShowcase.tsx",
        "name": "MCPAppsShowcase",
        "reason": "Component is not imported anywhere in the codebase",
        "complexity": 282,
        "lastModified": "2025-08-31T15:22:19.780Z",
        "potentialIntegrations": [
          "Could replace or enhance Card usage in page",
          "Could replace or enhance Card usage in page",
          "Could replace or enhance Card usage in ProjectCard"
        ],
        "codeSnippet": "export default MCPAppsShowcase { \n  const [selectedApp, setSelectedApp] = useState(mcpApps[0])\n  const [showCode, setShowCode] = useS... }"
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import MCPAppsShowcase from '@/src/components/ui/MCPAppsShowcase.tsx';",
      "confidence": 98,
      "reason": "Could replace or enhance Card usage in ProjectCard"
    },
    {
      "feature": {
        "type": "asset",
        "path": "public/icons/performance.svg",
        "name": "performance.svg",
        "reason": "Asset is not referenced in any component or CSS",
        "complexity": 0,
        "lastModified": "2025-09-05T05:15:07.661Z",
        "potentialIntegrations": [
          "Could be used as image in components",
          "Could be added to hero sections or galleries"
        ]
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import performance.svg from '@/public/icons/performance.svg';",
      "confidence": 98,
      "reason": "Could be used as image in components"
    },
    {
      "feature": {
        "type": "asset",
        "path": "public/icons/performance.svg",
        "name": "performance.svg",
        "reason": "Asset is not referenced in any component or CSS",
        "complexity": 0,
        "lastModified": "2025-09-05T05:15:07.661Z",
        "potentialIntegrations": [
          "Could be used as image in components",
          "Could be added to hero sections or galleries"
        ]
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import performance.svg from '@/public/icons/performance.svg';",
      "confidence": 98,
      "reason": "Could be added to hero sections or galleries"
    },
    {
      "feature": {
        "type": "component",
        "path": "src/components/ui/HeroTypographed.tsx",
        "name": "HeroTypographed",
        "reason": "Component is not imported anywhere in the codebase",
        "complexity": 229,
        "lastModified": "2025-09-05T20:18:57.045Z",
        "potentialIntegrations": [
          "Could replace button elements in DataErrorBoundary",
          "Could replace button elements in ErrorBoundary",
          "Could replace button elements in HeroWave"
        ],
        "codeSnippet": "HeroWave { \n  const [isHovered, setIsHovered] = useState(false);\n  const [scrollY, setScrollY] = useState(0);\n\n... }"
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import HeroTypographed from '@/src/components/ui/HeroTypographed.tsx';",
      "confidence": 97,
      "reason": "Could replace button elements in DataErrorBoundary"
    },
    {
      "feature": {
        "type": "api",
        "path": "src/app/api/placeholder/[...dimensions]/route.ts",
        "name": "/api/placeholder/[...dimensions]",
        "reason": "API endpoint is not called from any component or service",
        "complexity": 36,
        "lastModified": "2025-08-31T18:34:12.354Z",
        "potentialIntegrations": [
          "Could be called from form components",
          "Could be integrated with data fetching hooks"
        ],
        "codeSnippet": "GET {  params ... }"
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import /api/placeholder/[...dimensions] from '@/src/app/api/placeholder/[...dimensions]/route.ts';",
      "confidence": 97,
      "reason": "Could be called from form components"
    },
    {
      "feature": {
        "type": "component",
        "path": "src/components/ui/LoadingSystem.simple.stories.tsx",
        "name": "LoadingSystem.simple.stories",
        "reason": "Component is not imported anywhere in the codebase",
        "complexity": 34,
        "lastModified": "2025-09-05T18:19:54.214Z",
        "potentialIntegrations": [
          "Could replace button elements in DataErrorBoundary",
          "Could replace button elements in ErrorBoundary",
          "Could replace button elements in HeroWave"
        ],
        "codeSnippet": "export default meta { \n  args: {\n    size: 'sm',\n  ... }"
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import LoadingSystem.simple.stories from '@/src/components/ui/LoadingSystem.simple.stories.tsx';",
      "confidence": 97,
      "reason": "Could replace button elements in HeroWave"
    },
    {
      "feature": {
        "type": "asset",
        "path": "public/icons/automation.svg",
        "name": "automation.svg",
        "reason": "Asset is not referenced in any component or CSS",
        "complexity": 0,
        "lastModified": "2025-09-05T05:14:43.138Z",
        "potentialIntegrations": [
          "Could be used as image in components",
          "Could be added to hero sections or galleries"
        ]
      },
      "targetFile": "src/app/page.tsx",
      "integrationCode": "import automation.svg from '@/public/icons/automation.svg';",
      "confidence": 97,
      "reason": "Could be used as image in components"
    }
  ],
  "actions": [
    "Review 56 high-complexity forgotten features for integration",
    "Investigate 80 recently modified but unused features",
    "Consider integrating 43 unused UI components"
  ]
}