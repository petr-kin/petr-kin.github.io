<svg width="1200" height="630" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#F5F3F0;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#FFFFFF;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#EBF8FF;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="titleGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#06B6D4;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#3B82F6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#06B6D4;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="accentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#8B5CF6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#EC4899;stop-opacity:1" />
    </linearGradient>
    
    <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <!-- Background -->
  <rect width="1200" height="630" fill="url(#bgGradient)"/>
  
  <!-- Background geometric shapes -->
  <g opacity="0.1">
    <circle cx="200" cy="150" r="80" fill="url(#titleGradient)"/>
    <circle cx="1000" cy="400" r="120" fill="url(#accentGradient)"/>
    <circle cx="800" cy="100" r="60" fill="url(#titleGradient)"/>
  </g>
  
  <!-- Grid pattern -->
  <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
    <circle cx="2" cy="2" r="1" fill="#06B6D4" opacity="0.1"/>
  </pattern>
  <rect width="1200" height="630" fill="url(#grid)"/>
  
  <!-- Main content -->
  <g transform="translate(80, 0)">
    <!-- Logo/Icon -->
    <g transform="translate(100, 120)">
      <circle cx="0" cy="0" r="40" fill="url(#titleGradient)" filter="url(#glow)"/>
      <circle cx="0" cy="-5" r="20" fill="none" stroke="#ffffff" stroke-width="3"/>
      <circle cx="0" cy="-5" r="12" fill="none" stroke="#ffffff" stroke-width="2"/>
      <path d="M-20,10 L-8,22 L20,0" fill="none" stroke="#ffffff" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
      <g fill="#ffffff" opacity="0.8">
        <circle cx="-25" cy="25" r="2"/>
        <circle cx="-15" cy="28" r="2"/>
        <circle cx="-5" cy="30" r="2"/>
        <circle cx="5" cy="28" r="2"/>
        <circle cx="15" cy="25" r="2"/>
      </g>
    </g>
    
    <!-- Main title -->
    <text x="200" y="150" font-family="system-ui, -apple-system, sans-serif" font-size="72" font-weight="900" fill="url(#titleGradient)" filter="url(#glow)">
      Petr Kindlmann
    </text>
    
    <!-- Subtitle -->
    <text x="200" y="210" font-family="system-ui, -apple-system, sans-serif" font-size="36" font-weight="600" fill="#112D4E">
      QA-Minded Developer
    </text>
    
    <!-- Description -->
    <text x="200" y="280" font-family="system-ui, -apple-system, sans-serif" font-size="24" font-weight="400" fill="#4A5568" opacity="0.8">
      AI-powered test automation • Playwright expert • 4+ years enterprise QA
    </text>
    
    <!-- Tech stack badges -->
    <g transform="translate(200, 330)">
      <rect x="0" y="0" width="120" height="35" rx="17" fill="url(#titleGradient)" opacity="0.9"/>
      <text x="60" y="23" font-family="system-ui, sans-serif" font-size="14" font-weight="600" text-anchor="middle" fill="#ffffff">
        Playwright
      </text>
      
      <rect x="140" y="0" width="100" height="35" rx="17" fill="url(#accentGradient)" opacity="0.9"/>
      <text x="190" y="23" font-family="system-ui, sans-serif" font-size="14" font-weight="600" text-anchor="middle" fill="#ffffff">
        AI Agents
      </text>
      
      <rect x="260" y="0" width="90" height="35" rx="17" fill="#10B981" opacity="0.9"/>
      <text x="305" y="23" font-family="system-ui, sans-serif" font-size="14" font-weight="600" text-anchor="middle" fill="#ffffff">
        React
      </text>
      
      <rect x="370" y="0" width="80" height="35" rx="17" fill="#F59E0B" opacity="0.9"/>
      <text x="410" y="23" font-family="system-ui, sans-serif" font-size="14" font-weight="600" text-anchor="middle" fill="#ffffff">
        MCP
      </text>
    </g>
    
    <!-- URL -->
    <text x="200" y="420" font-family="system-ui, -apple-system, sans-serif" font-size="20" font-weight="500" fill="url(#titleGradient)">
      petrkindlmann.dev
    </text>
    
    <!-- Key features -->
    <g transform="translate(200, 460)" opacity="0.7">
      <text x="0" y="0" font-family="system-ui, sans-serif" font-size="16" font-weight="500" fill="#4A5568">
        ✓ Self-healing test automation   ✓ AI-powered QA solutions   ✓ Enterprise-grade testing
      </text>
    </g>
  </g>
  
  <!-- Right side visual element -->
  <g transform="translate(900, 200)">
    <!-- Code-like visualization -->
    <rect x="0" y="0" width="250" height="180" rx="12" fill="#1F2937" opacity="0.9"/>
    <rect x="12" y="12" width="226" height="20" rx="4" fill="#374151"/>
    
    <!-- Code lines -->
    <g font-family="monospace" font-size="12" fill="#10B981">
      <text x="20" y="55">await page.locator('.login')</text>
      <text x="40" y="75">.click();</text>
      <text x="20" y="95" fill="#06B6D4">expect(response).toBeOK();</text>
      <text x="20" y="115" fill="#F59E0B">// AI-generated test</text>
      <text x="20" y="135" fill="#EC4899">test.healing.enabled();</text>
    </g>
    
    <!-- Status indicator -->
    <circle cx="230" cy="22" r="4" fill="#10B981"/>
    <text x="190" y="27" font-family="system-ui, sans-serif" font-size="10" fill="#9CA3AF">
      Tests: ✓ Passing
    </text>
  </g>
</svg>